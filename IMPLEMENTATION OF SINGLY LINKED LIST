#include <iostream>
using namespace std;
class Node
{
public:
int data;
Node *next;
Node(int Val)
{
data = val;
next = NULL;
}
};
class SinglyLinkedList
{
public:
Node *head, *tail;
SinglyLinkedList()
{
head = NULL;
tail = NULL;
}
bool isEmpty();
void append(int);
void insert(int, int);
void deleteNode(int);
bool search(int);
void printList();
};
bool SinglyLinkedList::isEmpty() {
 return head == NULL;
}
void SinglyLinkedList::append(int data) {
 Node* new_node = new Node(data);
 if (isEmpty()) {
 head = new_node;
 tail = new_node;
 return;
 }
 tail->next = new_node;
 tail = new_node;
}
void SinglyLinkedList::insert(int prevData, int data) {
 if (isEmpty()) {
 cout << "list is empty\n";
 return;
 }
 Node* current_node = head;
 while (current_node != NULL) {
 if (current_node->data == prevData) {
 Node* new_node = new Node(data);
 new_node->next = current_node->next;
 current_node->next = new_node;
 if (current_node == tail) {
 tail = new_node;
 }
 return;
 }
 current_node = current_node->next;
 }
 cout << "previous val not in list\n";
}
void SinglyLinkedList::deleteNode(int data) {
 if (isEmpty()) {
 cout << "val not in list\n";
 return;
 }
 Node* current_node = head;
 Node* prev_node = NULL;
 while (current_node != NULL) {
 if (current_node->data == data) {
 if (prev_node == NULL) {
 head = current_node->next;
 } else {
 prev_node->next = current_node->next;
 }
 if (current_node == tail) {
 tail = prev_node;
 }
 delete current_node;
 return;
 }
 prev_node = current_node;
 current_node = current_node->next;
 }
 cout << "val not in list\n";
}
bool SinglyLinkedList::search(int data) {
 if (isEmpty()) {
 return false;
 }
 Node* current_node = head;
 while (current_node != NULL) {
 if (current_node->data == data) {
 return true;
 }
 current_node = current_node->next;
 }
 return false;
}
void SinglyLinkedList::printList()
{
if(isEmpty())
{
cout<< "list is empty"<<endl;
return;
}
Node *temp=head;
while(temp!=tail)
{
cout<<temp->data<<" ";
temp=temp->next;
}
cout<<tail->data<<endl;
}
int main()
{
SinglyLinkedList singlyLinkedList=SinglyLinkedList();
int N,queryType,preData,data;
cin>> N;
for(int query=1;query<=N;query++)
{
cin>> queryType;
switch(queryType)
{
case 1:
cin>> data;
singlyLinkedList.append(data);
break;
case 2:
cin>> prevData>> data;
singlyLinkedList.insert(preData,data);
break;
case 3:
cin>> data;
cout<< singlyLinkedList.deleteNode(data);
break;
case 4:
cin>> data;
cout<< singlyLinkedList.search(data)<<endl;
break;
case 5:
singlyLinkedList.printList();
}
}
return 0;
}
The query type can be one of the following types
1-append
2-insert
3-deleteNode
4-search
5-printList
