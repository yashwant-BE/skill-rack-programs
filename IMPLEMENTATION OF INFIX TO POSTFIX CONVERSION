#include <iostream>
#include <stack>
#include <string>
using namespace std;
// Function to check if a character is an operator
bool isOperator(char c) {
 if (c == '+' || c == '-' || c == '*' || c == '/' || c == '%' || c == '^')
 return true;
 return false;
}
// Function to get the precedence of an operator
int getPrecedence(char c) {
 if (c == '+' || c == '-')
 return 1;
 else if (c == '*' || c == '/' || c == '%')
 return 2;
 else if (c == '^')
 return 3;
 return -1; // invalid operator
}
// Function to convert infix expression to postfix expression
string infixToPostfix(string expression) {
 stack<char> stk;
 string postfix = "";
 for (int i = 0; i < expression.length(); i++) {
 if (expression[i] == ' ' || expression[i] == '\t') // ignore white spaces and tabs
 continue;
 else if (isOperator(expression[i])) { // if operator
 if (expression[i] == '^') { // right associative operator
 while (!stk.empty() && getPrecedence(stk.top()) > getPrecedence(expression[i])) 
{
 postfix += stk.top();
 stk.pop();
 }
 } else { // left associative operator
 while (!stk.empty() && getPrecedence(stk.top()) >= 
getPrecedence(expression[i])) {
 postfix += stk.top();
 stk.pop();
 }
 }
 stk.push(expression[i]);
 } else if (expression[i] == '(') { // if opening parenthesis
 stk.push(expression[i]);
 } else if (expression[i] == ')') { // if closing parenthesis
 while (!stk.empty() && stk.top() != '(') {
 postfix += stk.top();
 stk.pop();
 }
 stk.pop(); // remove opening parenthesis
 } else { // if operand
 while (i < expression.length() && !isOperator(expression[i]) && expression[i] != '(' 
&& expression[i] != ')') {
 postfix += expression[i];
 i++;
 }
 i--; // to compensate for the extra increment in the for loop
 }
 }
 while (!stk.empty()) { // add remaining operators
 postfix += stk.top();
 stk.pop();
 }
 return postfix;
}
int main(int argc, char** argv) {
 string expression;
 getline(cin, expression);
 string postfix = infixToPostfix(expression);
 cout<< postfix << endl; 
 return 0;
}
